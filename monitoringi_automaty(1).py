# -*- coding: utf-8 -*-
"""Soczyste rabaty.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bfU5lwdNa2GOPWmQ9-URaf30VnlBzQC0
"""

#importowanie potrzebnych bibliotek
import os
import openpyxl
import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import plotly.express as px
import plotly.graph_objects as go
from urllib.request import urlopen
import json
import io
import datetime



st.set_page_config(page_title='Monitoringi AUTOMATY', layout='wide')


sekcja = st.sidebar.radio(
    'Wybierz monitoring:',
    ('Soczyste rabaty','Paramig Fast Junior 250MG', 'Paramig Fast 500MG','Paramig MIX','Wsparcie z natury','Cykl Q4')
 )

tabs_font_css = """
<style>
div[class*="stTextInput"] label {
  font-size: 26px;
  color: black;
}
div[class*="stSelectbox"] label {
  font-size: 26px;
  color: black;
}
</style>
"""
#POTRZEBNE FUNKCJE
#1 Funkcja do wyodrębnienia wartości procentowej
def extract_percentage(text):
    import re
    match = re.search(r'(\d+,\d+|\d+)%', text)
    return match.group(0) if match else ''

#2 Funkcja do konwersji wartości procentowej na float
def percentage_to_float(percentage_str):
    if pd.isna(percentage_str) or not percentage_str:
        return 0.0  # Zmieniono na 0.0, aby brakujące wartości były traktowane jako 0
    # Zamiana przecinka na kropkę, usunięcie znaku '%'
    return float(percentage_str.replace(',', '.').replace('%', ''))


dzisiejsza_data = datetime.datetime.now().strftime("%d.%m.%Y")
############################################################################### SOCZYSTE RABATY  ##############################################################################################
if sekcja == 'Soczyste rabaty':
    st.write(tabs_font_css, unsafe_allow_html=True)

    df = st.file_uploader(
        label = "Wrzuć plik Cykl - soczyste rabaty"
    )
    if df:
        df = pd.read_excel(df, sheet_name = 'Promocje na utrzymanie i FUS', skiprows = 15, usecols = [1,2,9,10])
        st.write(df.head())


    #usuń braki danych z Kod klienta
    df = df.dropna(subset=['Kod klienta'])

    # klient na całkowite
    df['KLIENT'] = df['KLIENT'].astype(int)
    df['Kod klienta'] = df['Kod klienta'].astype(int)

    # Zmiana nazw kolumn
    df = df.rename(columns={'0.12.1': '12', '0.14.1': '14'})

    # Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnach '12' lub '14' jest słowo 'powiązanie'
    df['SIECIOWY'] = df.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['12']).lower() or 'powiązanie' in str(row['14']).lower() else '', axis=1)

    #SPRAWDZENIE CZY DZIAŁA
    #df[df['SIECIOWY'] == 'SIECIOWY']
    #DZIAŁA :)

    
    # Zastosowanie funkcji do kolumn '12' i '14'
    df['12_percent'] = df['12'].apply(extract_percentage)
    df['14_percent'] = df['14'].apply(extract_percentage)


    # Konwersja kolumn '12_percent' i '14_percent' na liczby zmiennoprzecinkowe
    df['12_percent'] = df['12_percent'].apply(percentage_to_float)
    df['14_percent'] = df['14_percent'].apply(percentage_to_float)

    # Dodaj nową kolumnę 'max_percent' z maksymalnymi wartościami z kolumn '12_percent' i '14_percent'
    df['max_percent'] = df[['12_percent', '14_percent']].max(axis=1)

    # Wybierz wiersze, gdzie 'max_percent' nie jest równa 0
    filtered_df = df[df['max_percent'] != 0]

    standard = filtered_df[filtered_df['SIECIOWY'] != 'SIECIOWY']
    powiazanie = filtered_df[filtered_df['SIECIOWY'] == 'SIECIOWY']

    #len(standard), len(powiazanie), len(filtered_df)

    standard_ost = standard[['Kod klienta', 'max_percent']]

    powiazanie = powiazanie[['KLIENT','Kod klienta','max_percent']]


    #TERAZ IMS
    ims = st.file_uploader(
        label = "Wrzuć plik ims_nhd"
    )

    if ims:
        ims = pd.read_excel(ims, usecols=[0,2,19,21])
        st.write(ims.head())

    ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
    ims = ims[~ims['APD_Rodzaj_farmaceutyczny'].isin(['DR - drogeria hurt', 'SZ - Szpital', 'IN - Inni', 'ZO - ZOZ', 'HA - Hurtownia farmaceutyczna apteczna', 'ZA - Apteka zakładowa', 'KI - Ogólnodostępna sieć handlowa', 
                                                     'GA Gabinet lekarski', 'HB - Hurtownia farmaceutyczna bez psychotropów', 'HU - Hurtownia farmaceutyczna z psychotropami', 'GW - Gabinet weterynaryjny', 'HP - Hurtownia farmaceutyczna apteczna - psychotropy',
                                                      'GP - Gabinet pielęgniarski','UC - Uczelnia','HK - Hurtownia farmaceutyczna apteczna kontrolowane','HO - Hurtownia z ograniczonym asortymentem','DP - Dom pomocy społ.','DR - drogeria hurt',
                                                      'HN - Hurtownia farmaceutyczna apteczna - narkotyki','BK - Badanie kliniczne','ZB - Typ ZOZ bez REGON14','IW - Izba wytrzeźwień','EX - Odbiorca zagraniczny','RA - Ratownictwo med.','ZM - Sklep zaopatrzenia medycznego'])]


    wynik_df = pd.merge(powiazanie, ims, left_on='KLIENT', right_on='Klient', how='left')

    # Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
    wynik_df = wynik_df[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]


    #to są kody SAP
    wynik_df1 = wynik_df.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df1 = wynik_df1[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df2 = wynik_df.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df2 = wynik_df2[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone = pd.concat([standard_ost, wynik_df1, wynik_df2], axis = 0)
  
    posortowane = polaczone.sort_values(by='max_percent', ascending=False)

    ostatecznie = posortowane.drop_duplicates(subset='Kod klienta')


    st.write('Jeśli to pierwszy monitoring, pobierz ten plik, jeśli nie, wrzuć plik z poprzedniego monitoringu i NIE POBIERAJ TEGO PLIKU')
    excel_file = io.BytesIO()
    with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
        ostatecznie.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file.seek(0)  # Resetowanie wskaźnika do początku pliku

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz, jeśli to pierwszy monitoring',
        data=excel_file,
        file_name='czy_dodac.xlsx',
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    #plik z poprzedniego monitoringu
    poprzedni = st.file_uploader(
        label = "Wrzuć plik z poprzedniego monitoringu"
    )

    if poprzedni:
        poprzedni = pd.read_excel(poprzedni)
        st.write(poprzedni.head())

    poprzedni = poprzedni.rename(columns={'max_percent': 'old_percent'})
    # Wykonanie left join, dodanie 'old_percent' do pliku 'ostatecznie'
    result = ostatecznie.merge(poprzedni[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
    result['old_percent'] = result['old_percent'].fillna(0)
    result['Czy dodać'] = result.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)
    st.write('Kliknij aby pobrać plik z kodami, które kody należy dodać')

    excel_file1 = io.BytesIO()
    with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku1 = f"SOCZYSTE_RABATY_{dzisiejsza_data}.xlsx"
    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz',
        data=excel_file1,
        file_name=nazwa_pliku1,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    result = result.drop(columns=['old_percent', 'Czy dodać'])


    st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')
    excel_file2 = io.BytesIO()
    with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku = f"FM_SOCZYSTE_RABATY_{dzisiejsza_data}.xlsx"
    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz nowy plik FORMUŁA MAX',
        data=excel_file2,
        file_name = nazwa_pliku,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )




#############################################################        PARAMIG FAST JUNIOR 250                    ############################################################################


if sekcja == 'Paramig Fast Junior 250MG':
    st.write(tabs_font_css, unsafe_allow_html=True)

    uploaded_file = st.file_uploader(
        label = "Wrzuć plik Cykl Paramig"
    )
    if uploaded_file:
        df = pd.read_excel(uploaded_file, sheet_name = 'PARAMIG FAST JUN 250MG od 20.08', skiprows = 16, usecols = [1,2,16,17,18,19,20,21,22])
        df1 = pd.read_excel(uploaded_file, sheet_name = 'MIX od 20.08', skiprows = 16, usecols = [1,2,13,14,15,16])
        df2 = pd.read_excel(uploaded_file, sheet_name = 'PARAMIG FAST JUNIOR 250MG_nowe', skiprows = 16, usecols = [1,2,13,14,15,16,17,18])
        df3 = pd.read_excel(uploaded_file, sheet_name = 'MIX od 08.07 i 05.08', skiprows = 16, usecols = [1,2,11,12,13,14])
        st.write(df3.head())
    

    #usuń braki danych z Kod klienta
    df = df.dropna(subset=['Kod klienta'])
    df1 = df1.dropna(subset=['Kod klienta'])
    df2 = df2.dropna(subset=['Kod klienta'])
    df3 = df3.dropna(subset=['Kod klienta'])


    # klient na całkowite
    df['KLIENT'] = df['KLIENT'].astype(int)
    df1['KLIENT'] = df1['KLIENT'].astype(int)
    df2['KLIENT'] = df2['KLIENT'].astype(int)
    df3['KLIENT'] = df3['KLIENT'].astype(int)
    
    df['Kod klienta'] = df['Kod klienta'].astype(int)
    df1['Kod klienta'] = df1['Kod klienta'].astype(int)
    df2['Kod klienta'] = df2['Kod klienta'].astype(int)
    df3['Kod klienta'] = df3['Kod klienta'].astype(int)

    

    #Zmiana nazw kolumn
    df = df.rename(columns={'0.08.3': '8', '0.1.3': '10', '0.13.3': '13', '0.08.4': '8_1', '0.1.4': '10_1', '0.13.4': '13_1', '0.13.5':'13_2'})
    df1 = df1.rename(columns={'0.1.3': '10', '0.13.3': '13', '0.1.4': '10_1', '0.13.4': '13_1'})
    df2 = df2.rename(columns={'0.22.2': '22', '0.24.2': '24', '0.27.2': '27', '0.22.3': '22_1', '0.24.3': '24_1', '0.27.3': '27_1'})
    df3 = df3.rename(columns={'0.24.2': '24', '0.27.2': '27', '0.24.3': '24_1', '0.27.3': '27_1'})
    

    # Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnachjest słowo 'powiązanie'
    df['SIECIOWY'] = df.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['8']).lower() or 'powiązanie' in str(row['10']).lower() or 'powiązanie' in str(row['13']).lower()
                              or 'powiązanie' in str(row['8_1']).lower() or 'powiązanie' in str(row['10_1']).lower() or 'powiązanie' in str(row['13_1']).lower()
                              or 'powiązanie' in str(row['13_2']).lower() else '', axis=1)

    
    
    def classify_row(row):
        if 'powiązanie' in str(row['10']).lower() or \
           'powiązanie' in str(row['13']).lower() or \
           'powiązanie' in str(row['10_1']).lower() or \
           'powiązanie' in str(row['13_1']).lower():
            return 'SIECIOWY'
        else:
            return ''

    df1['SIECIOWY'] = df1.apply(classify_row, axis=1)

    def classify_row1(row):
        if 'powiązanie' in str(row['22']).lower() or \
           'powiązanie' in str(row['24']).lower() or \
           'powiązanie' in str(row['27']).lower() or \
           'powiązanie' in str(row['22_1']).lower() or \
           'powiązanie' in str(row['24_1']).lower() or \
           'powiązanie' in str(row['27_1']).lower():
            return 'SIECIOWY'
        else:
            return ''

    df2['SIECIOWY'] = df2.apply(classify_row1, axis=1)

    def classify_row2(row):
        if 'powiązanie' in str(row['24']).lower() or \
           'powiązanie' in str(row['27']).lower() or \
           'powiązanie' in str(row['24_1']).lower() or \
           'powiązanie' in str(row['27_1']).lower():
            return 'SIECIOWY'
        else:
            return ''

    df3['SIECIOWY'] = df3.apply(classify_row2, axis=1)


    # Zastosowanie funkcji do kolumn
    df['8_percent'] = df['8'].apply(extract_percentage)
    df['10_percent'] = df['10'].apply(extract_percentage)
    df['13_percent'] = df['13'].apply(extract_percentage)
    df['8_1_percent'] = df['8_1'].apply(extract_percentage)
    df['10_1_percent'] = df['10_1'].apply(extract_percentage)
    df['13_1_percent'] = df['13_1'].apply(extract_percentage)
    df['13_2_percent'] = df['13_2'].apply(extract_percentage)

    df1['10_percent'] = df1['10'].apply(extract_percentage)
    df1['13_percent'] = df1['13'].apply(extract_percentage)
    df1['10_1_percent'] = df1['10_1'].apply(extract_percentage)
    df1['13_1_percent'] = df1['13_1'].apply(extract_percentage)

    df2['22_percent'] = df2['22'].apply(extract_percentage)
    df2['24_percent'] = df2['24'].apply(extract_percentage)
    df2['27_percent'] = df2['27'].apply(extract_percentage)
    df2['22_1_percent'] = df2['22_1'].apply(extract_percentage)
    df2['24_1_percent'] = df2['24_1'].apply(extract_percentage)
    df2['27_1_percent'] = df2['27_1'].apply(extract_percentage)

    df3['24_percent'] = df3['24'].apply(extract_percentage)
    df3['27_percent'] = df3['27'].apply(extract_percentage)
    df3['24_1_percent'] = df3['24_1'].apply(extract_percentage)
    df3['27_1_percent'] = df3['27_1'].apply(extract_percentage)
  


    
    # Konwersja kolumn na liczby zmiennoprzecinkowe
    df['8_percent'] = df['8_percent'].apply(percentage_to_float)
    df['10_percent'] = df['10_percent'].apply(percentage_to_float)
    df['13_percent'] = df['13_percent'].apply(percentage_to_float)
    df['8_1_percent'] = df['8_1_percent'].apply(percentage_to_float)
    df['10_1_percent'] = df['10_1_percent'].apply(percentage_to_float)
    df['13_1_percent'] = df['13_1_percent'].apply(percentage_to_float)
    df['13_2_percent'] = df['13_2_percent'].apply(percentage_to_float)

    df1['10_percent'] = df1['10_percent'].apply(percentage_to_float)
    df1['13_percent'] = df1['13_percent'].apply(percentage_to_float)
    df1['10_1_percent'] = df1['10_1_percent'].apply(percentage_to_float)
    df1['13_1_percent'] = df1['13_1_percent'].apply(percentage_to_float)

    df2['22_percent'] = df2['22_percent'].apply(percentage_to_float)
    df2['24_percent'] = df2['24_percent'].apply(percentage_to_float)
    df2['27_percent'] = df2['27_percent'].apply(percentage_to_float)
    df2['22_1_percent'] = df2['22_1_percent'].apply(percentage_to_float)
    df2['24_1_percent'] = df2['24_1_percent'].apply(percentage_to_float)
    df2['27_1_percent'] = df2['27_1_percent'].apply(percentage_to_float)

    df3['24_percent'] = df3['24_percent'].apply(percentage_to_float)
    df3['27_percent'] = df3['27_percent'].apply(percentage_to_float)
    df3['24_1_percent'] = df3['24_1_percent'].apply(percentage_to_float)
    df3['27_1_percent'] = df3['27_1_percent'].apply(percentage_to_float)
   
    

    # Dodaj nową kolumnę 'max_percent' z maksymalnymi wartościami z kolumn 
    df['max_percent'] = df[['8_percent', '10_percent', '13_percent', '8_1_percent', '10_1_percent', '13_1_percent', '13_2_percent']].max(axis=1)
    df1['max_percent'] = df1[['10_percent', '13_percent', '10_1_percent', '13_1_percent']].max(axis=1)
    df2['max_percent'] = df2[['22_percent', '24_percent', '27_percent', '22_1_percent', '24_1_percent', '27_1_percent']].max(axis=1)
    df3['max_percent'] = df3[['24_percent', '27_percent', '24_1_percent', '27_1_percent']].max(axis=1)

    # Wybierz wiersze, gdzie 'max_percent' nie jest równa 0
    filtered_df = df[df['max_percent'] != 0]
    filtered_df1 = df1[df1['max_percent'] != 0]
    filtered_df2 = df2[df2['max_percent'] != 0]
    filtered_df3 = df3[df3['max_percent'] != 0]

    standard = filtered_df[filtered_df['SIECIOWY'] != 'SIECIOWY']
    powiazanie = filtered_df[filtered_df['SIECIOWY'] == 'SIECIOWY']

    standard1 = filtered_df1[filtered_df1['SIECIOWY'] != 'SIECIOWY']
    powiazanie1 = filtered_df1[filtered_df1['SIECIOWY'] == 'SIECIOWY']

    standard2 = filtered_df2[filtered_df2['SIECIOWY'] != 'SIECIOWY']
    powiazanie2 = filtered_df2[filtered_df2['SIECIOWY'] == 'SIECIOWY']

    standard3 = filtered_df3[filtered_df3['SIECIOWY'] != 'SIECIOWY']
    powiazanie3 = filtered_df3[filtered_df3['SIECIOWY'] == 'SIECIOWY']

    #len(standard), len(powiazanie), len(filtered_df)

    standard_ost = standard[['Kod klienta', 'max_percent']]
    powiazanie = powiazanie[['KLIENT','Kod klienta','max_percent']]

    standard_ost1 = standard1[['Kod klienta', 'max_percent']]
    powiazanie1 = powiazanie1[['KLIENT','Kod klienta','max_percent']]

    standard_ost2 = standard2[['Kod klienta', 'max_percent']]
    powiazanie2 = powiazanie2[['KLIENT','Kod klienta','max_percent']]

    standard_ost3 = standard3[['Kod klienta', 'max_percent']]
    powiazanie3 = powiazanie3[['KLIENT','Kod klienta','max_percent']]


    #########################################         TERAZ IMS
    ims = st.file_uploader(
        label = "Wrzuć plik ims_nhd"
    )

    if ims:
        ims = pd.read_excel(ims, usecols=[0,2,19,21])
        st.write(ims.head())

    ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
    ims = ims[~ims['APD_Rodzaj_farmaceutyczny'].isin(['DR - drogeria hurt', 'SZ - Szpital', 'IN - Inni', 'ZO - ZOZ', 'HA - Hurtownia farmaceutyczna apteczna', 'ZA - Apteka zakładowa', 'KI - Ogólnodostępna sieć handlowa', 
                                                     'GA Gabinet lekarski', 'HB - Hurtownia farmaceutyczna bez psychotropów', 'HU - Hurtownia farmaceutyczna z psychotropami', 'GW - Gabinet weterynaryjny', 'HP - Hurtownia farmaceutyczna apteczna - psychotropy',
                                                      'GP - Gabinet pielęgniarski','UC - Uczelnia','HK - Hurtownia farmaceutyczna apteczna kontrolowane','HO - Hurtownia z ograniczonym asortymentem','DP - Dom pomocy społ.','DR - drogeria hurt',
                                                      'HN - Hurtownia farmaceutyczna apteczna - narkotyki','BK - Badanie kliniczne','ZB - Typ ZOZ bez REGON14','IW - Izba wytrzeźwień','EX - Odbiorca zagraniczny','RA - Ratownictwo med.','ZM - Sklep zaopatrzenia medycznego'])]


    wynik_df = pd.merge(powiazanie, ims, left_on='KLIENT', right_on='Klient', how='left')
    wynik_df1 = pd.merge(powiazanie1, ims, left_on='KLIENT', right_on='Klient', how='left')
    wynik_df2 = pd.merge(powiazanie2, ims, left_on='KLIENT', right_on='Klient', how='left')
    wynik_df3 = pd.merge(powiazanie3, ims, left_on='KLIENT', right_on='Klient', how='left')

    # Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
    wynik_df = wynik_df[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
    wynik_df1 = wynik_df1[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
    wynik_df2 = wynik_df2[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
    wynik_df3 = wynik_df3[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]

    
    #### do tego pierwszego
    #to są kody SAP
    wynik_df_1 = wynik_df.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df_1 = wynik_df_1[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df_2 = wynik_df.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df_2 = wynik_df_2[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone = pd.concat([standard_ost, wynik_df_1, wynik_df_2], axis = 0)
    posortowane = polaczone.sort_values(by='max_percent', ascending=False)
    ostatecznie = posortowane.drop_duplicates(subset='Kod klienta')
    



    
    ### do tego drugiego
    wynik_df_11 = wynik_df1.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df_11 = wynik_df_11[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df_21 = wynik_df1.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df_21 = wynik_df_21[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone1 = pd.concat([standard_ost1, wynik_df_11, wynik_df_21], axis = 0)
    posortowane1 = polaczone1.sort_values(by='max_percent', ascending=False)
    ostatecznie1 = posortowane1.drop_duplicates(subset='Kod klienta')


    
    ### do tego trzeciego
    wynik_df_12 = wynik_df2.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df_12 = wynik_df_12[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df_22 = wynik_df2.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df_22 = wynik_df_22[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone2 = pd.concat([standard_ost2, wynik_df_12, wynik_df_22], axis = 0)
    posortowane2 = polaczone2.sort_values(by='max_percent', ascending=False)
    ostatecznie2 = posortowane2.drop_duplicates(subset='Kod klienta')


    ### do tego czwartego
    wynik_df_13 = wynik_df3.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df_13 = wynik_df_13[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df_23 = wynik_df3.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df_23 = wynik_df_23[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone3 = pd.concat([standard_ost3, wynik_df_13, wynik_df_23], axis = 0)
    posortowane3 = polaczone3.sort_values(by='max_percent', ascending=False)
    ostatecznie3 = posortowane3.drop_duplicates(subset='Kod klienta')
    

    combined_df = pd.concat([ostatecznie, ostatecznie1, ostatecznie2, ostatecznie3], ignore_index=True)
    max_rabaty = combined_df.groupby('Kod klienta')['max_percent'].max().reset_index()



    #plik z poprzedniego monitoringu
    poprzedni = st.file_uploader(
        label = "Wrzuć plik z poprzedniego monitoringu"
    )

    if poprzedni:
        poprzedni = pd.read_excel(poprzedni)
        st.write(poprzedni.head())

    poprzedni = poprzedni.rename(columns={'max_percent': 'old_percent'})
    # Wykonanie left join, dodanie 'old_percent' do pliku 'ostatecznie'
    result = max_rabaty.merge(poprzedni[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
    result['old_percent'] = result['old_percent'].fillna(0)
    result['Czy dodać'] = result.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)
    st.write('Kliknij aby pobrać plik z kodami, które kody należy dodać')

    excel_file1 = io.BytesIO()
    with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku1 = f"PARAMIG_250_{dzisiejsza_data}.xlsx"

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz',
        data=excel_file1,
        file_name=nazwa_pliku1,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    result = result.drop(columns=['old_percent', 'Czy dodać'])


    st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')
    excel_file2 = io.BytesIO()
    with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku
    
    nazwa_pliku = f"FM_PARAMIG_250_{dzisiejsza_data}.xlsx"

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz nowy plik FORMUŁA MAX',
        data=excel_file2,
        file_name=nazwa_pliku,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )



#############################################################        PARAMIG FAST 500                    ############################################################################


if sekcja == 'Paramig Fast 500MG':
    st.write(tabs_font_css, unsafe_allow_html=True)

    uploaded_file = st.file_uploader(
        label = "Wrzuć plik Cykl Paramig"
    )
    if uploaded_file:
        df = pd.read_excel(uploaded_file, sheet_name = 'PARAMIG FAST 500MG od 20.08', skiprows = 16, usecols = [1,2,16,17,18,19,20,21,22])
        df1 = pd.read_excel(uploaded_file, sheet_name = 'MIX od 20.08', skiprows = 16, usecols = [1,2,13,14,15,16])
        df2 = pd.read_excel(uploaded_file, sheet_name = 'PARAMIG FAST 500MG_nowe', skiprows = 16, usecols = [1,2,13,14,15,16,17,18])
        df3 = pd.read_excel(uploaded_file, sheet_name = 'MIX od 08.07 i 05.08', skiprows = 16, usecols = [1,2,11,12,13,14])


    #usuń braki danych z Kod klienta
    df = df.dropna(subset=['Kod klienta'])
    df1 = df1.dropna(subset=['Kod klienta'])
    df2 = df2.dropna(subset=['Kod klienta'])
    df3 = df3.dropna(subset=['Kod klienta'])


    # klient na całkowite
    df['KLIENT'] = df['KLIENT'].astype(int)
    df1['KLIENT'] = df1['KLIENT'].astype(int)
    df2['KLIENT'] = df2['KLIENT'].astype(int)
    df3['KLIENT'] = df3['KLIENT'].astype(int)
    
    df['Kod klienta'] = df['Kod klienta'].astype(int)
    df1['Kod klienta'] = df1['Kod klienta'].astype(int)
    df2['Kod klienta'] = df2['Kod klienta'].astype(int)
    df3['Kod klienta'] = df3['Kod klienta'].astype(int)

    

    #Zmiana nazw kolumn
    df = df.rename(columns={'0.08.3': '8', '0.1.3': '10', '0.13.3': '13', '0.08.4': '8_1', '0.1.4': '10_1', '0.13.4': '13_1', '0.13.5':'13_2'})
    df1 = df1.rename(columns={'0.1.3': '10', '0.13.3': '13', '0.1.4': '10_1', '0.13.4': '13_1'})
    df2 = df2.rename(columns={'0.22.2': '22', '0.24.2': '24', '0.27.2': '27', '0.22.3': '22_1', '0.24.3': '24_1', '0.27.3': '27_1'})
    df3 = df3.rename(columns={'0.24.2': '24', '0.27.2': '27', '0.24.3': '24_1', '0.27.3': '27_1'})
    

    # Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnachjest słowo 'powiązanie'
    df['SIECIOWY'] = df.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['8']).lower() or 'powiązanie' in str(row['10']).lower() or 'powiązanie' in str(row['13']).lower()
                              or 'powiązanie' in str(row['8_1']).lower() or 'powiązanie' in str(row['10_1']).lower() or 'powiązanie' in str(row['13_1']).lower()
                              or 'powiązanie' in str(row['13_2']).lower() else '', axis=1)

    
    
    def classify_row(row):
        if 'powiązanie' in str(row['10']).lower() or \
           'powiązanie' in str(row['13']).lower() or \
           'powiązanie' in str(row['10_1']).lower() or \
           'powiązanie' in str(row['13_1']).lower():
            return 'SIECIOWY'
        else:
            return ''

    df1['SIECIOWY'] = df1.apply(classify_row, axis=1)

    def classify_row1(row):
        if 'powiązanie' in str(row['22']).lower() or \
           'powiązanie' in str(row['24']).lower() or \
           'powiązanie' in str(row['27']).lower() or \
           'powiązanie' in str(row['22_1']).lower() or \
           'powiązanie' in str(row['24_1']).lower() or \
           'powiązanie' in str(row['27_1']).lower():
            return 'SIECIOWY'
        else:
            return ''

    df2['SIECIOWY'] = df2.apply(classify_row1, axis=1)

    def classify_row2(row):
        if 'powiązanie' in str(row['24']).lower() or \
           'powiązanie' in str(row['27']).lower() or \
           'powiązanie' in str(row['24_1']).lower() or \
           'powiązanie' in str(row['27_1']).lower():
            return 'SIECIOWY'
        else:
            return ''

    df3['SIECIOWY'] = df3.apply(classify_row2, axis=1)


    # Zastosowanie funkcji do kolumn
    df['8_percent'] = df['8'].apply(extract_percentage)
    df['10_percent'] = df['10'].apply(extract_percentage)
    df['13_percent'] = df['13'].apply(extract_percentage)
    df['8_1_percent'] = df['8_1'].apply(extract_percentage)
    df['10_1_percent'] = df['10_1'].apply(extract_percentage)
    df['13_1_percent'] = df['13_1'].apply(extract_percentage)
    df['13_2_percent'] = df['13_2'].apply(extract_percentage)

    df1['10_percent'] = df1['10'].apply(extract_percentage)
    df1['13_percent'] = df1['13'].apply(extract_percentage)
    df1['10_1_percent'] = df1['10_1'].apply(extract_percentage)
    df1['13_1_percent'] = df1['13_1'].apply(extract_percentage)

    df2['22_percent'] = df2['22'].apply(extract_percentage)
    df2['24_percent'] = df2['24'].apply(extract_percentage)
    df2['27_percent'] = df2['27'].apply(extract_percentage)
    df2['22_1_percent'] = df2['22_1'].apply(extract_percentage)
    df2['24_1_percent'] = df2['24_1'].apply(extract_percentage)
    df2['27_1_percent'] = df2['27_1'].apply(extract_percentage)

    df3['24_percent'] = df3['24'].apply(extract_percentage)
    df3['27_percent'] = df3['27'].apply(extract_percentage)
    df3['24_1_percent'] = df3['24_1'].apply(extract_percentage)
    df3['27_1_percent'] = df3['27_1'].apply(extract_percentage)
  


    
    # Konwersja kolumn na liczby zmiennoprzecinkowe
    df['8_percent'] = df['8_percent'].apply(percentage_to_float)
    df['10_percent'] = df['10_percent'].apply(percentage_to_float)
    df['13_percent'] = df['13_percent'].apply(percentage_to_float)
    df['8_1_percent'] = df['8_1_percent'].apply(percentage_to_float)
    df['10_1_percent'] = df['10_1_percent'].apply(percentage_to_float)
    df['13_1_percent'] = df['13_1_percent'].apply(percentage_to_float)
    df['13_2_percent'] = df['13_2_percent'].apply(percentage_to_float)

    df1['10_percent'] = df1['10_percent'].apply(percentage_to_float)
    df1['13_percent'] = df1['13_percent'].apply(percentage_to_float)
    df1['10_1_percent'] = df1['10_1_percent'].apply(percentage_to_float)
    df1['13_1_percent'] = df1['13_1_percent'].apply(percentage_to_float)

    df2['22_percent'] = df2['22_percent'].apply(percentage_to_float)
    df2['24_percent'] = df2['24_percent'].apply(percentage_to_float)
    df2['27_percent'] = df2['27_percent'].apply(percentage_to_float)
    df2['22_1_percent'] = df2['22_1_percent'].apply(percentage_to_float)
    df2['24_1_percent'] = df2['24_1_percent'].apply(percentage_to_float)
    df2['27_1_percent'] = df2['27_1_percent'].apply(percentage_to_float)

    df3['24_percent'] = df3['24_percent'].apply(percentage_to_float)
    df3['27_percent'] = df3['27_percent'].apply(percentage_to_float)
    df3['24_1_percent'] = df3['24_1_percent'].apply(percentage_to_float)
    df3['27_1_percent'] = df3['27_1_percent'].apply(percentage_to_float)
   
    

    # Dodaj nową kolumnę 'max_percent' z maksymalnymi wartościami z kolumn 
    df['max_percent'] = df[['8_percent', '10_percent', '13_percent', '8_1_percent', '10_1_percent', '13_1_percent', '13_2_percent']].max(axis=1)
    df1['max_percent'] = df1[['10_percent', '13_percent', '10_1_percent', '13_1_percent']].max(axis=1)
    df2['max_percent'] = df2[['22_percent', '24_percent', '27_percent', '22_1_percent', '24_1_percent', '27_1_percent']].max(axis=1)
    df3['max_percent'] = df3[['24_percent', '27_percent', '24_1_percent', '27_1_percent']].max(axis=1)

    # Wybierz wiersze, gdzie 'max_percent' nie jest równa 0
    filtered_df = df[df['max_percent'] != 0]
    filtered_df1 = df1[df1['max_percent'] != 0]
    filtered_df2 = df2[df2['max_percent'] != 0]
    filtered_df3 = df3[df3['max_percent'] != 0]

    standard = filtered_df[filtered_df['SIECIOWY'] != 'SIECIOWY']
    powiazanie = filtered_df[filtered_df['SIECIOWY'] == 'SIECIOWY']

    standard1 = filtered_df1[filtered_df1['SIECIOWY'] != 'SIECIOWY']
    powiazanie1 = filtered_df1[filtered_df1['SIECIOWY'] == 'SIECIOWY']

    standard2 = filtered_df2[filtered_df2['SIECIOWY'] != 'SIECIOWY']
    powiazanie2 = filtered_df2[filtered_df2['SIECIOWY'] == 'SIECIOWY']

    standard3 = filtered_df3[filtered_df3['SIECIOWY'] != 'SIECIOWY']
    powiazanie3 = filtered_df3[filtered_df3['SIECIOWY'] == 'SIECIOWY']

    #len(standard), len(powiazanie), len(filtered_df)

    standard_ost = standard[['Kod klienta', 'max_percent']]
    powiazanie = powiazanie[['KLIENT','Kod klienta','max_percent']]

    standard_ost1 = standard1[['Kod klienta', 'max_percent']]
    powiazanie1 = powiazanie1[['KLIENT','Kod klienta','max_percent']]

    standard_ost2 = standard2[['Kod klienta', 'max_percent']]
    powiazanie2 = powiazanie2[['KLIENT','Kod klienta','max_percent']]

    standard_ost3 = standard3[['Kod klienta', 'max_percent']]
    powiazanie3 = powiazanie3[['KLIENT','Kod klienta','max_percent']]


    #########################################         TERAZ IMS
    ims = st.file_uploader(
        label = "Wrzuć plik ims_nhd"
    )

    if ims:
        ims = pd.read_excel(ims, usecols=[0,2,19,21])
        st.write(ims.head())

    ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
    ims = ims[~ims['APD_Rodzaj_farmaceutyczny'].isin(['DR - drogeria hurt', 'SZ - Szpital', 'IN - Inni', 'ZO - ZOZ', 'HA - Hurtownia farmaceutyczna apteczna', 'ZA - Apteka zakładowa', 'KI - Ogólnodostępna sieć handlowa', 
                                                     'GA Gabinet lekarski', 'HB - Hurtownia farmaceutyczna bez psychotropów', 'HU - Hurtownia farmaceutyczna z psychotropami', 'GW - Gabinet weterynaryjny', 'HP - Hurtownia farmaceutyczna apteczna - psychotropy',
                                                      'GP - Gabinet pielęgniarski','UC - Uczelnia','HK - Hurtownia farmaceutyczna apteczna kontrolowane','HO - Hurtownia z ograniczonym asortymentem','DP - Dom pomocy społ.','DR - drogeria hurt',
                                                      'HN - Hurtownia farmaceutyczna apteczna - narkotyki','BK - Badanie kliniczne','ZB - Typ ZOZ bez REGON14','IW - Izba wytrzeźwień','EX - Odbiorca zagraniczny','RA - Ratownictwo med.','ZM - Sklep zaopatrzenia medycznego'])]


    wynik_df = pd.merge(powiazanie, ims, left_on='KLIENT', right_on='Klient', how='left')
    wynik_df1 = pd.merge(powiazanie1, ims, left_on='KLIENT', right_on='Klient', how='left')
    wynik_df2 = pd.merge(powiazanie2, ims, left_on='KLIENT', right_on='Klient', how='left')
    wynik_df3 = pd.merge(powiazanie3, ims, left_on='KLIENT', right_on='Klient', how='left')

    # Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
    wynik_df = wynik_df[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
    wynik_df1 = wynik_df1[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
    wynik_df2 = wynik_df2[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
    wynik_df3 = wynik_df3[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]

    
    #### do tego pierwszego
    #to są kody SAP
    wynik_df_1 = wynik_df.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df_1 = wynik_df_1[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df_2 = wynik_df.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df_2 = wynik_df_2[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone = pd.concat([standard_ost, wynik_df_1, wynik_df_2], axis = 0)
    posortowane = polaczone.sort_values(by='max_percent', ascending=False)
    ostatecznie = posortowane.drop_duplicates(subset='Kod klienta')
    



    
    ### do tego drugiego
    wynik_df_11 = wynik_df1.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df_11 = wynik_df_11[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df_21 = wynik_df1.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df_21 = wynik_df_21[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone1 = pd.concat([standard_ost1, wynik_df_11, wynik_df_21], axis = 0)
    posortowane1 = polaczone1.sort_values(by='max_percent', ascending=False)
    ostatecznie1 = posortowane1.drop_duplicates(subset='Kod klienta')


    
    ### do tego trzeciego
    wynik_df_12 = wynik_df2.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df_12 = wynik_df_12[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df_22 = wynik_df2.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df_22 = wynik_df_22[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone2 = pd.concat([standard_ost2, wynik_df_12, wynik_df_22], axis = 0)
    posortowane2 = polaczone2.sort_values(by='max_percent', ascending=False)
    ostatecznie2 = posortowane2.drop_duplicates(subset='Kod klienta')


    ### do tego czwartego
    wynik_df_13 = wynik_df3.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df_13 = wynik_df_13[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df_23 = wynik_df3.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df_23 = wynik_df_23[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone3 = pd.concat([standard_ost3, wynik_df_13, wynik_df_23], axis = 0)
    posortowane3 = polaczone3.sort_values(by='max_percent', ascending=False)
    ostatecznie3 = posortowane3.drop_duplicates(subset='Kod klienta')
    

    combined_df = pd.concat([ostatecznie, ostatecznie1, ostatecznie2, ostatecznie3], ignore_index=True)
    max_rabaty = combined_df.groupby('Kod klienta')['max_percent'].max().reset_index()



    #plik z poprzedniego monitoringu
    poprzedni = st.file_uploader(
        label = "Wrzuć plik z poprzedniego monitoringu"
    )

    if poprzedni:
        poprzedni = pd.read_excel(poprzedni)
        st.write(poprzedni.head())

    poprzedni = poprzedni.rename(columns={'max_percent': 'old_percent'})
    # Wykonanie left join, dodanie 'old_percent' do pliku 'ostatecznie'
    result = max_rabaty.merge(poprzedni[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
    result['old_percent'] = result['old_percent'].fillna(0)
    result['Czy dodać'] = result.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)
    st.write('Kliknij aby pobrać plik z kodami, które kody należy dodać')

    excel_file1 = io.BytesIO()
    with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku1 = f"PARAMIG_500_{dzisiejsza_data}.xlsx"

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz',
        data=excel_file1,
        file_name=nazwa_pliku1,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    result = result.drop(columns=['old_percent', 'Czy dodać'])


    st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')
    excel_file2 = io.BytesIO()
    with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku
    
    nazwa_pliku = f"FM_PARAMIG_500_{dzisiejsza_data}.xlsx"

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz nowy plik FORMUŁA MAX',
        data=excel_file2,
        file_name=nazwa_pliku,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )



######################################################################## PARAMIG MIX ###################################################################################################



if sekcja == 'Paramig MIX':
    st.write(tabs_font_css, unsafe_allow_html=True)

    uploaded_file = st.file_uploader(
        label = "Wrzuć plik Cykl Paramig"
    )
    if uploaded_file:
        df1 = pd.read_excel(uploaded_file, sheet_name = 'MIX od 20.08', skiprows = 16, usecols = [1,2,13,14,15,16])
        df3 = pd.read_excel(uploaded_file, sheet_name = 'MIX od 08.07 i 05.08', skiprows = 16, usecols = [1,2,11,12,13,14])
    
    

    #usuń braki danych z Kod klienta
    df1 = df1.dropna(subset=['Kod klienta'])
    df3 = df3.dropna(subset=['Kod klienta'])


    # klient na całkowite
    df1['KLIENT'] = df1['KLIENT'].astype(int)
    df3['KLIENT'] = df3['KLIENT'].astype(int)
    
    df1['Kod klienta'] = df1['Kod klienta'].astype(int)
    df3['Kod klienta'] = df3['Kod klienta'].astype(int)

    

    #Zmiana nazw kolumn
    df1 = df1.rename(columns={'0.1.3': '10', '0.13.3': '13', '0.1.4': '10_1', '0.13.4': '13_1'})
    df3 = df3.rename(columns={'0.24.2': '24', '0.27.2': '27', '0.24.3': '24_1', '0.27.3': '27_1'})
    

    # Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnachjest słowo 'powiązanie'    
    def classify_row(row):
        if 'powiązanie' in str(row['10']).lower() or \
           'powiązanie' in str(row['13']).lower() or \
           'powiązanie' in str(row['10_1']).lower() or \
           'powiązanie' in str(row['13_1']).lower():
            return 'SIECIOWY'
        else:
            return ''

    df1['SIECIOWY'] = df1.apply(classify_row, axis=1)

    def classify_row2(row):
        if 'powiązanie' in str(row['24']).lower() or \
           'powiązanie' in str(row['27']).lower() or \
           'powiązanie' in str(row['24_1']).lower() or \
           'powiązanie' in str(row['27_1']).lower():
            return 'SIECIOWY'
        else:
            return ''

    df3['SIECIOWY'] = df3.apply(classify_row2, axis=1)


    # Zastosowanie funkcji do kolumn
    df1['10_percent'] = df1['10'].apply(extract_percentage)
    df1['13_percent'] = df1['13'].apply(extract_percentage)
    df1['10_1_percent'] = df1['10_1'].apply(extract_percentage)
    df1['13_1_percent'] = df1['13_1'].apply(extract_percentage)

    df3['24_percent'] = df3['24'].apply(extract_percentage)
    df3['27_percent'] = df3['27'].apply(extract_percentage)
    df3['24_1_percent'] = df3['24_1'].apply(extract_percentage)
    df3['27_1_percent'] = df3['27_1'].apply(extract_percentage)
  


    
    # Konwersja kolumn na liczby zmiennoprzecinkowe
    df1['10_percent'] = df1['10_percent'].apply(percentage_to_float)
    df1['13_percent'] = df1['13_percent'].apply(percentage_to_float)
    df1['10_1_percent'] = df1['10_1_percent'].apply(percentage_to_float)
    df1['13_1_percent'] = df1['13_1_percent'].apply(percentage_to_float)

    df3['24_percent'] = df3['24_percent'].apply(percentage_to_float)
    df3['27_percent'] = df3['27_percent'].apply(percentage_to_float)
    df3['24_1_percent'] = df3['24_1_percent'].apply(percentage_to_float)
    df3['27_1_percent'] = df3['27_1_percent'].apply(percentage_to_float)
   
    

    # Dodaj nową kolumnę 'max_percent' z maksymalnymi wartościami z kolumn 
    df1['max_percent'] = df1[['10_percent', '13_percent', '10_1_percent', '13_1_percent']].max(axis=1)
    df3['max_percent'] = df3[['24_percent', '27_percent', '24_1_percent', '27_1_percent']].max(axis=1)

    # Wybierz wiersze, gdzie 'max_percent' nie jest równa 0
    filtered_df1 = df1[df1['max_percent'] != 0]
    filtered_df3 = df3[df3['max_percent'] != 0]

    standard1 = filtered_df1[filtered_df1['SIECIOWY'] != 'SIECIOWY']
    powiazanie1 = filtered_df1[filtered_df1['SIECIOWY'] == 'SIECIOWY']
    
    standard3 = filtered_df3[filtered_df3['SIECIOWY'] != 'SIECIOWY']
    powiazanie3 = filtered_df3[filtered_df3['SIECIOWY'] == 'SIECIOWY']

    #len(standard), len(powiazanie), len(filtered_df)

    standard_ost1 = standard1[['Kod klienta', 'max_percent']]
    powiazanie1 = powiazanie1[['KLIENT','Kod klienta','max_percent']]

    standard_ost3 = standard3[['Kod klienta', 'max_percent']]
    powiazanie3 = powiazanie3[['KLIENT','Kod klienta','max_percent']]


    #########################################         TERAZ IMS
    ims = st.file_uploader(
        label = "Wrzuć plik ims_nhd"
    )

    if ims:
        ims = pd.read_excel(ims, usecols=[0,2,19,21])
        st.write(ims.head())

    ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
    ims = ims[~ims['APD_Rodzaj_farmaceutyczny'].isin(['DR - drogeria hurt', 'SZ - Szpital', 'IN - Inni', 'ZO - ZOZ', 'HA - Hurtownia farmaceutyczna apteczna', 'ZA - Apteka zakładowa', 'KI - Ogólnodostępna sieć handlowa', 
                                                     'GA Gabinet lekarski', 'HB - Hurtownia farmaceutyczna bez psychotropów', 'HU - Hurtownia farmaceutyczna z psychotropami', 'GW - Gabinet weterynaryjny', 'HP - Hurtownia farmaceutyczna apteczna - psychotropy',
                                                      'GP - Gabinet pielęgniarski','UC - Uczelnia','HK - Hurtownia farmaceutyczna apteczna kontrolowane','HO - Hurtownia z ograniczonym asortymentem','DP - Dom pomocy społ.','DR - drogeria hurt',
                                                      'HN - Hurtownia farmaceutyczna apteczna - narkotyki','BK - Badanie kliniczne','ZB - Typ ZOZ bez REGON14','IW - Izba wytrzeźwień','EX - Odbiorca zagraniczny','RA - Ratownictwo med.','ZM - Sklep zaopatrzenia medycznego'])]


    wynik_df1 = pd.merge(powiazanie1, ims, left_on='KLIENT', right_on='Klient', how='left')
    wynik_df3 = pd.merge(powiazanie3, ims, left_on='KLIENT', right_on='Klient', how='left')

    # Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
    wynik_df1 = wynik_df1[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]
    wynik_df3 = wynik_df3[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]

    
    
    ### do tego drugiego
    wynik_df_11 = wynik_df1.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df_11 = wynik_df_11[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df_21 = wynik_df1.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df_21 = wynik_df_21[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone1 = pd.concat([standard_ost1, wynik_df_11, wynik_df_21], axis = 0)
    posortowane1 = polaczone1.sort_values(by='max_percent', ascending=False)
    ostatecznie1 = posortowane1.drop_duplicates(subset='Kod klienta')


    

    ### do tego czwartego
    wynik_df_13 = wynik_df3.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df_13 = wynik_df_13[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df_23 = wynik_df3.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df_23 = wynik_df_23[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone3 = pd.concat([standard_ost3, wynik_df_13, wynik_df_23], axis = 0)
    posortowane3 = polaczone3.sort_values(by='max_percent', ascending=False)
    ostatecznie3 = posortowane3.drop_duplicates(subset='Kod klienta')
    

    combined_df = pd.concat([ostatecznie1, ostatecznie3], ignore_index=True)
    max_rabaty = combined_df.groupby('Kod klienta')['max_percent'].max().reset_index()



    #plik z poprzedniego monitoringu
    poprzedni = st.file_uploader(
        label = "Wrzuć plik z poprzedniego monitoringu"
    )

    if poprzedni:
        poprzedni = pd.read_excel(poprzedni)
        st.write(poprzedni.head())

    poprzedni = poprzedni.rename(columns={'max_percent': 'old_percent'})
    # Wykonanie left join, dodanie 'old_percent' do pliku 'ostatecznie'
    result = max_rabaty.merge(poprzedni[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
    result['old_percent'] = result['old_percent'].fillna(0)
    result['Czy dodać'] = result.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)
    st.write('Kliknij aby pobrać plik z kodami, które kody należy dodać')

    excel_file1 = io.BytesIO()
    with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku1 = f"PARAMIG_MIX_{dzisiejsza_data}.xlsx"

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz',
        data=excel_file1,
        file_name=nazwa_pliku1,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    result = result.drop(columns=['old_percent', 'Czy dodać'])


    st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')
    excel_file2 = io.BytesIO()
    with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku
    
    nazwa_pliku = f"FM_PARAMIG_MIX_{dzisiejsza_data}.xlsx"

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz nowy plik FORMUŁA MAX',
        data=excel_file2,
        file_name=nazwa_pliku,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )



############################################################################### WSPARCIE Z NATURY  ##############################################################################################
if sekcja == 'Wsparcie z natury':
    st.write(tabs_font_css, unsafe_allow_html=True)

    df = st.file_uploader(
        label = "Wrzuć plik Cykl - soczyste rabaty"
    )
    if df:
        df = pd.read_excel(df, sheet_name = 'Promocje na utrzymanie', skiprows = 19, usecols = [1, 9])
        st.write(df.head())


    #usuń braki danych z Kod klienta
    df = df.dropna(subset=['KLIENT'])

    # klient na całkowite
    df['KLIENT'] = df['KLIENT'].astype(int)

    
    # Zmiana nazw kolumn
    df = df.rename(columns={'0.15.1': '15'})

    # Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnach '12' lub '14' jest słowo 'powiązanie'
    df['SIECIOWY'] = df.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['15']).lower() else '', axis=1)

    #SPRAWDZENIE CZY DZIAŁA
    #df[df['SIECIOWY'] == 'SIECIOWY']
    #DZIAŁA :)

    
    # Zastosowanie funkcji do kolumn '12' i '14'
    df['15_percent'] = df['15'].apply(extract_percentage)


    # Konwersja kolumn '12_percent' i '14_percent' na liczby zmiennoprzecinkowe
    df['15_percent'] = df['15_percent'].apply(percentage_to_float)
    df = df.rename(columns={'15_percent':'max_percent'})


    # Wybierz wiersze, gdzie 'max_percent' nie jest równa 0
    filtered_df = df[df['max_percent'] != 0]

    standard = filtered_df[filtered_df['SIECIOWY'] != 'SIECIOWY']
    
    powiazanie = filtered_df[filtered_df['SIECIOWY'] == 'SIECIOWY']
    #len(standard), len(powiazanie), len(filtered_df)

    # Dodanie kolumny "CZY_OK", sprawdzającej długość tekstu
    powiazanie['KLIENT_S'] = powiazanie['KLIENT'].apply(lambda x: x if len(str(x)) == 5 else '')
    #powiazanie

    dane1 = powiazanie[powiazanie['KLIENT_S'].notna() & (powiazanie['KLIENT_S'] != '')]
    #dane1
    dane2 = powiazanie[powiazanie['KLIENT_S'].isna() | (powiazanie['KLIENT_S'] == '')]
    dane2 = dane2.rename(columns={'KLIENT':'Kod klienta'})
    #dane2
    #dane2.shape


    ######################################################### TERAZ IMS
    ims = st.file_uploader(
        label = "Wrzuć plik ims_nhd"
    )

    if ims:
        ims = pd.read_excel(ims, usecols=[0,2,19,21])
        st.write(ims.head())

    ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
    ims = ims[~ims['APD_Rodzaj_farmaceutyczny'].isin(['DR - drogeria hurt', 'SZ - Szpital', 'IN - Inni', 'ZO - ZOZ', 'HA - Hurtownia farmaceutyczna apteczna', 'ZA - Apteka zakładowa', 'KI - Ogólnodostępna sieć handlowa', 
                                                     'GA Gabinet lekarski', 'HB - Hurtownia farmaceutyczna bez psychotropów', 'HU - Hurtownia farmaceutyczna z psychotropami', 'GW - Gabinet weterynaryjny', 'HP - Hurtownia farmaceutyczna apteczna - psychotropy',
                                                      'GP - Gabinet pielęgniarski','UC - Uczelnia','HK - Hurtownia farmaceutyczna apteczna kontrolowane','HO - Hurtownia z ograniczonym asortymentem','DP - Dom pomocy społ.','DR - drogeria hurt',
                                                      'HN - Hurtownia farmaceutyczna apteczna - narkotyki','BK - Badanie kliniczne','ZB - Typ ZOZ bez REGON14','IW - Izba wytrzeźwień','EX - Odbiorca zagraniczny','RA - Ratownictwo med.','ZM - Sklep zaopatrzenia medycznego'])]


    #dane1 czyli te co są tylko kody sieciowe
    wynik_df = pd.merge(dane1, ims, left_on='KLIENT', right_on='Klient', how='left')

    # Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
    wynik_df = wynik_df[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]


    #to są kody SAP
    wynik_df1 = wynik_df.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df1 = wynik_df1[['Kod klienta','max_percent']]
    #wynik_df1
    #wynik_df1.shape

    #to są kody powiazan
    wynik_df2 = wynik_df.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df2 = wynik_df2[['Kod klienta','max_percent']]
    #wynik_df2
    #wynik_df2.shape

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone = pd.concat([wynik_df1, wynik_df2], axis = 0)
    posortowane = polaczone.sort_values(by='max_percent', ascending=False)
    ostatecznie1 = posortowane.drop_duplicates(subset='Kod klienta')
    #ostatecznie1

    dane2 = dane2[['Kod klienta','max_percent']]

    ostateczne = pd.concat([ostatecznie1, dane2], axis = 0)
    ostateczne = ostateczne.sort_values(by='max_percent', ascending=False)
    ostateczne = ostateczne.drop_duplicates(subset='Kod klienta')
    #ostateczne.shape

    

    st.write('Jeśli to pierwszy monitoring, pobierz ten plik, jeśli nie, wrzuć plik z poprzedniego monitoringu i NIE POBIERAJ TEGO PLIKU')
    excel_file = io.BytesIO()
    with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
        ostateczne.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file.seek(0)  # Resetowanie wskaźnika do początku pliku

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz, jeśli to pierwszy monitoring',
        data=excel_file,
        file_name='czy_dodac.xlsx',
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    #plik z poprzedniego monitoringu
    poprzedni = st.file_uploader(
        label = "Wrzuć plik z poprzedniego monitoringu"
    )

    if poprzedni:
        poprzedni = pd.read_excel(poprzedni)
        st.write(poprzedni.head())

    poprzedni = poprzedni.rename(columns={'max_percent': 'old_percent'})
    # Wykonanie left join, dodanie 'old_percent' do pliku 'ostatecznie'
    result = ostateczne.merge(poprzedni[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
    result['old_percent'] = result['old_percent'].fillna(0)
    result['Czy dodać'] = result.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)
    st.write('Kliknij aby pobrać plik z kodami, które kody należy dodać')

    excel_file1 = io.BytesIO()
    with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku1 = f"WSPARCIE_Z_NATURY_{dzisiejsza_data}.xlsx"
    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz',
        data=excel_file1,
        file_name=nazwa_pliku1,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    result = result.drop(columns=['old_percent', 'Czy dodać'])


    st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')
    excel_file2 = io.BytesIO()
    with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku = f"FM_WSPARCIE_Z_NATURY_{dzisiejsza_data}.xlsx"
    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz nowy plik FORMUŁA MAX',
        data=excel_file2,
        file_name = nazwa_pliku,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )


############################################################################### CYKL 4Q  ##############################################################################################
if sekcja == 'Cykl Q4':
    st.write(tabs_font_css, unsafe_allow_html=True)

    df = st.file_uploader(
        label = "Wrzuć plik Cykl - Cykl Q4"
    )
    if df:
        df = pd.read_excel(df, sheet_name = 'Promocje na utrzymanie i FUS', skiprows = 15, usecols = [1,2,9,10])
        st.write(df.head())


    #usuń braki danych z Kod klienta
    df = df.dropna(subset=['Kod klienta'])

    # klient na całkowite
    df['KLIENT'] = df['KLIENT'].astype(int)
    df['Kod klienta'] = df['Kod klienta'].astype(int)

    # Zmiana nazw kolumn
    df = df.rename(columns={'0.12.1': '12', '0.14.1': '14'})

    # Dodaj kolumnę 'SIECIOWY', która będzie zawierać 'SIECIOWY' jeśli w kolumnach '12' lub '14' jest słowo 'powiązanie'
    df['SIECIOWY'] = df.apply(lambda row: 'SIECIOWY' if 'powiązanie' in str(row['12']).lower() or 'powiązanie' in str(row['14']).lower() else '', axis=1)

    #SPRAWDZENIE CZY DZIAŁA
    #df[df['SIECIOWY'] == 'SIECIOWY']
    #DZIAŁA :)

    
    # Zastosowanie funkcji do kolumn '12' i '14'
    df['12_percent'] = df['12'].apply(extract_percentage)
    df['14_percent'] = df['14'].apply(extract_percentage)


    # Konwersja kolumn '12_percent' i '14_percent' na liczby zmiennoprzecinkowe
    df['12_percent'] = df['12_percent'].apply(percentage_to_float)
    df['14_percent'] = df['14_percent'].apply(percentage_to_float)

    # Dodaj nową kolumnę 'max_percent' z maksymalnymi wartościami z kolumn '12_percent' i '14_percent'
    df['max_percent'] = df[['12_percent', '14_percent']].max(axis=1)

    # Wybierz wiersze, gdzie 'max_percent' nie jest równa 0
    filtered_df = df[df['max_percent'] != 0]

    standard = filtered_df[filtered_df['SIECIOWY'] != 'SIECIOWY']
    powiazanie = filtered_df[filtered_df['SIECIOWY'] == 'SIECIOWY']

    #len(standard), len(powiazanie), len(filtered_df)

    standard_ost = standard[['Kod klienta', 'max_percent']]

    powiazanie = powiazanie[['KLIENT','Kod klienta','max_percent']]


    #TERAZ IMS
    ims = st.file_uploader(
        label = "Wrzuć plik ims_nhd"
    )

    if ims:
        ims = pd.read_excel(ims, usecols=[0,2,19,21])
        st.write(ims.head())

    ims = ims[ims['APD_Czy_istnieje_na_rynku']==1]
    ims = ims[~ims['APD_Rodzaj_farmaceutyczny'].isin(['DR - drogeria hurt', 'SZ - Szpital', 'IN - Inni', 'ZO - ZOZ', 'HA - Hurtownia farmaceutyczna apteczna', 'ZA - Apteka zakładowa', 'KI - Ogólnodostępna sieć handlowa', 
                                                     'GA Gabinet lekarski', 'HB - Hurtownia farmaceutyczna bez psychotropów', 'HU - Hurtownia farmaceutyczna z psychotropami', 'GW - Gabinet weterynaryjny', 'HP - Hurtownia farmaceutyczna apteczna - psychotropy',
                                                      'GP - Gabinet pielęgniarski','UC - Uczelnia','HK - Hurtownia farmaceutyczna apteczna kontrolowane','HO - Hurtownia z ograniczonym asortymentem','DP - Dom pomocy społ.','DR - drogeria hurt',
                                                      'HN - Hurtownia farmaceutyczna apteczna - narkotyki','BK - Badanie kliniczne','ZB - Typ ZOZ bez REGON14','IW - Izba wytrzeźwień','EX - Odbiorca zagraniczny','RA - Ratownictwo med.','ZM - Sklep zaopatrzenia medycznego'])]


    wynik_df = pd.merge(powiazanie, ims, left_on='KLIENT', right_on='Klient', how='left')

    # Wybór potrzebnych kolumn: 'APD_kod_SAP_apteki' i 'max_percent'
    wynik_df = wynik_df[['KLIENT','APD_kod_SAP_apteki', 'max_percent']]


    #to są kody SAP
    wynik_df1 = wynik_df.rename(columns={'APD_kod_SAP_apteki': 'Kod klienta'})
    wynik_df1 = wynik_df1[['Kod klienta','max_percent']]
    #wynik_df1

    #to są kody powiazan
    wynik_df2 = wynik_df.rename(columns={'KLIENT': 'Kod klienta'})
    wynik_df2 = wynik_df2[['Kod klienta','max_percent']]
    #wynik_df2

    #POŁĄCZYĆ wynik_df z standard_ost
    polaczone = pd.concat([standard_ost, wynik_df1, wynik_df2], axis = 0)
  
    posortowane = polaczone.sort_values(by='max_percent', ascending=False)

    ostatecznie = posortowane.drop_duplicates(subset='Kod klienta')


    st.write('Jeśli to pierwszy monitoring, pobierz ten plik, jeśli nie, wrzuć plik z poprzedniego monitoringu i NIE POBIERAJ TEGO PLIKU')
    excel_file = io.BytesIO()
    with pd.ExcelWriter(excel_file, engine='xlsxwriter') as writer:
        ostatecznie.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file.seek(0)  # Resetowanie wskaźnika do początku pliku

    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz, jeśli to pierwszy monitoring',
        data=excel_file,
        file_name='czy_dodac.xlsx',
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    #plik z poprzedniego monitoringu
    poprzedni = st.file_uploader(
        label = "Wrzuć plik z poprzedniego monitoringu"
    )

    if poprzedni:
        poprzedni = pd.read_excel(poprzedni)
        st.write(poprzedni.head())

    poprzedni = poprzedni.rename(columns={'max_percent': 'old_percent'})
    # Wykonanie left join, dodanie 'old_percent' do pliku 'ostatecznie'
    result = ostatecznie.merge(poprzedni[['Kod klienta', 'old_percent']], on='Kod klienta', how='left')
    result['old_percent'] = result['old_percent'].fillna(0)
    result['Czy dodać'] = result.apply(lambda row: 'DODAJ' if row['max_percent'] > row['old_percent'] else '', axis=1)
    st.write('Kliknij aby pobrać plik z kodami, które kody należy dodać')

    excel_file1 = io.BytesIO()
    with pd.ExcelWriter(excel_file1, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku1 = f"CYKL_Q4_{dzisiejsza_data}.xlsx"
    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz',
        data=excel_file1,
        file_name=nazwa_pliku1,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )

    result = result.drop(columns=['old_percent', 'Czy dodać'])


    st.write('Kliknij, aby pobrać plik z formułą max do następnego monitoringu')
    excel_file2 = io.BytesIO()
    with pd.ExcelWriter(excel_file2, engine='xlsxwriter') as writer:
        result.to_excel(writer, index=False, sheet_name='Sheet1')
    excel_file1.seek(0)  # Resetowanie wskaźnika do początku pliku

    nazwa_pliku = f"FM_CYKL_Q4_{dzisiejsza_data}.xlsx"
    # Umożliwienie pobrania pliku Excel
    st.download_button(
        label='Pobierz nowy plik FORMUŁA MAX',
        data=excel_file2,
        file_name = nazwa_pliku,
        mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )






    
    























    
