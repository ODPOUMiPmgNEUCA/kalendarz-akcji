# -*- coding: utf-8 -*-
"""Kalendarz_akcji.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bfU5lwdNa2GOPWmQ9-URaf30VnlBzQC0
"""

import openpyxl
import streamlit as st
import pandas as pd
import numpy as np
import altair as alt
import plotly.express as px
import plotly.graph_objects as go
from urllib.request import urlopen
import json
import io
import datetime
from streamlit_calendar import calendar
from datetime import datetime

st.set_page_config(page_title='Kalendarz akcji', layout='wide')
st.title("📆 Kalendarz akcji")

# 🎨 PALETY
palettes = {
    "Żywa": [
        "#FF6B6B", "#FF922B", "#FFD93D", "#6BCB77", "#4D96FF", "#845EC2",
        "#FF5E78", "#00C9A7", "#FF4C4C", "#FF7F3F", "#FFCD38", "#28C76F",
        "#2E86DE", "#9D4EDD"
    ],
    "Pastelowa": [
        "#FFB3BA", "#FFDFBA", "#FFFFBA", "#BAFFC9", "#BAE1FF", "#E0BBE4",
        "#FFCCE5", "#C2F0FC", "#FFE5E5", "#FFF1BA", "#E6FFBA", "#BAFFE1",
        "#D4E7FF", "#F3D1FF"
    ],
    "Odcienie niebieskiego": [
        "#001F3F", "#003566", "#00509E", "#0074D9", "#419DFF", "#7ABFFF",
        "#A8D8FF", "#D6ECFF", "#002855", "#004E92", "#1A73E8", "#5DA9FF",
        "#96C7FF", "#CBE2FF"
    ]
}
# 📑 ZAKŁADKI NA POCZĄTKU
tab1, tab2 = st.tabs(["📆 Kalendarz główny", "📆 Kalendarz szczegółowy"])

with tab1:
    st.subheader("📅 Widok kalendarza")
    uploaded_file = st.file_uploader("📄 Wczytaj plik Excel z akcjami", type=["xlsx"])
    st.subheader("🎨 Wybierz paletę kolorów dla kalendarza")
    selected_palette_tab1 = st.selectbox("Paleta dla kalendarza", list(palettes.keys()), key="palette_tab1")

    if uploaded_file:
        df = pd.read_excel(uploaded_file)
        df["Data startu"] = pd.to_datetime(df["Data startu"])
        df["Data końca"] = pd.to_datetime(df["Data końca"])

        palette = palettes[selected_palette_tab1]
        unique_names = df["Nazwa akcji"].unique()
        color_map = {name: palette[i % len(palette)] for i, name in enumerate(unique_names)}

        events = []
        for _, row in df.iterrows():
            events.append({
                "start": row["Data startu"].strftime("%Y-%m-%d"),
                "end": row["Data końca"].strftime("%Y-%m-%d"),
                "title": row["Nazwa akcji"],
                "color": color_map[row["Nazwa akcji"]],
            })

        calendar_options = {
            "initialView": "dayGridMonth",
            "headerToolbar": {"left": "prev,next today", "center": "title", "right": "dayGridMonth,dayGridWeek,dayGridDay"},
            "height": 750,
            "contentHeight": "auto",
            "aspectRatio": 1.5,
            "navLinks": True,
            "editable": False,
            "dayMaxEventRows": True,
            "locale": "pl",
            "firstDay": 1
        }

        calendar(events=events, options=calendar_options)
    else:
        st.info("📥 Najpierw wczytaj plik Excel, aby zobaczyć kalendarz.")

with tab2:
    st.subheader("📅 Widok kalendarza szczegółowego")
    uploaded_file_tab2 = st.file_uploader("📄 Wczytaj plik csv (raport wolnego)", type=["csv"], key="uploader_tab2")
    
    st.subheader("🎨 Wybierz paletę kolorów dla kalendarza szczegółowego")
    selected_palette_tab2 = st.selectbox("Paleta dla kalendarza szczegółowego", list(palettes.keys()), key="palette_tab2")

    if uploaded_file_tab2:
        df2 = pd.read_csv(uploaded_file_tab2, sep=";")
        df2 = df2.iloc[:, [0, 22, 23, 32, 7]]
        df2.columns = ["Nazwa akcji", "Data startu", "Data końca", "Zlecenie", "Producent"]
        df2 = df2.drop_duplicates()
        df2["Data startu"] = pd.to_datetime(df2["Data startu"], errors='coerce')
        df2["Data końca"] = pd.to_datetime(df2["Data końca"], errors='coerce')
        next_year = datetime.now().year + 1
        limit_date = pd.Timestamp(year=next_year, month=12, day=31)
        
        # Zamieniamy daty większe niż limit_date na limit_date
        df2.loc[df2["Data końca"] > limit_date, "Data końca"] = limit_date
        
        # Zakładam, że w pliku jest kolumna "Producent"
        producenci = df2["Producent"].unique()
        wybrany_producent = st.selectbox("Wybierz producenta do wyświetlenia", options=producenci, key="select_producent")

        # Filtrujemy df2 wg wybranego producenta
        df2_filtered = df2[df2["Producent"] == wybrany_producent]

        palette2 = palettes[selected_palette_tab2]
        unique_names2 = df2_filtered["Nazwa akcji"].unique()
        color_map2 = {name: palette2[i % len(palette2)] for i, name in enumerate(unique_names2)}

        events2 = []
        for _, row in df2_filtered.iterrows():
            events2.append({
                "start": row["Data startu"].strftime("%Y-%m-%d"),
                "end": row["Data końca"].strftime("%Y-%m-%d"),
                "title": row["Nazwa akcji"],
                "color": color_map2[row["Nazwa akcji"]],
            })

        calendar_options2 = {
            "initialView": "dayGridMonth",
            "headerToolbar": {
                "left": "prev,next today",
                "center": "title",
                "right": "dayGridMonth,dayGridWeek,dayGridDay"
            },
            "height": 750,
            "contentHeight": "auto",
            "aspectRatio": 1.5,
            "navLinks": True,
            "editable": False,
            "dayMaxEventRows": True,
            "locale": "pl",
            "firstDay": 1
        }

        calendar(events=events2, options=calendar_options2)

    else:
        st.info("📥 Najpierw wczytaj plik Excel, aby zobaczyć kalendarz szczegółowy.")

